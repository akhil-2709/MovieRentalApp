@page "/admin/movie"
@page "/admin/movie/{id:int}"
@inject IMovieService MovieService
@inject IMovieTypeService MovieTypeService
@inject IGenreService GenreService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
    {
        <span>@msg</span>
    }
    else
    {
        @if (movie.Editing)
        {
            <h3>Edit "@movie.Title"</h3>
            }
            else if (movie.IsNew)
            {
            <h3>Create a new Movie</h3>
            }

        <EditForm Model="movie" OnValidSubmit="AddOrUpdateMovie">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="mb-0">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="movie.Title" class="form-control"></InputText>
            </div>
            <div class="mb-0">
                <label for="imageUrl">Image Url</label>
                <InputText id="imageUrl" @bind-Value="movie.ImageUrl" class="form-control"></InputText>
            </div>
            <div class="mb-0">
                <label for="description">Description</label>
                <InputTextArea id="description" @bind-Value="movie.Description" class="form-control"></InputTextArea>
            </div>
            <hr />
            <div class="header">
                <div class="col">Movie Type / Variant</div>
                <div class="col">WeekDayPrice</div>
                <div class="col">WeekEnd Price</div>
                <div class="col">Visible</div>
                <div class="col"></div>
            </div>
            @foreach (var variant in movie.Variants)
                {
                <div class="row">
                    <div class="col">
                        <InputSelect disabled="@variant.Deleted" @bind-Value="variant.MovieTypeId" class="form-control">
                            @foreach (var movieType in MovieTypeService.MovieTypes)
                                {
                                <option value="@movieType.Id.ToString()">@movieType.Name</option>
                                }
                        </InputSelect>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.WeekDayPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.WeekendPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.Count" class="form-control" disabled="@variant.Deleted"></InputNumber>
                    </div>
                    <div class="col col-visible">
                        <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.Deleted"></InputCheckbox>
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.MovieTypeId))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </div>
                </div>
                }
            <button class="btn btn-primary" @onclick="AddVariant">
                <i class="oi oi-plus"></i> Add Variant
            </button>
            <hr />
            <div class="mb-0">
                <label for="genre">Genre</label>
                <InputSelect id="category" @bind-Value="movie.GenreId" class="form-control">
                    @foreach (var genre in GenreService.AdminGenres)
                        {
                        <option value="@genre.Id">@genre.Name</option>
                        }
                </InputSelect>
            </div>
            <hr />
            <div class="form-check">
                <InputCheckbox id="featured" @bind-Value="movie.Featured" class="form-check-input"></InputCheckbox>
                <label for="featured" class="form-check-label">Featured</label>
            </div>
            <div class="form-check">
                <InputCheckbox id="visible" @bind-Value="movie.Visible" class="form-check-input"></InputCheckbox>
                <label for="visible" class="form-check-label">Visible</label>
            </div>
            <hr />
            <button type="submit" class="btn btn-primary float-end">@btnText</button>
            <ValidationSummary></ValidationSummary>
        </EditForm>
        @if (!movie.IsNew)
            {
            <button type="button" class="btn btn-danger float-start" @onclick="DeleteMovie">
                Delete Movie
            </button>
            }
    }


@code {

    [Parameter]
    public int Id { get; set; }

    Movie movie = new Movie();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await MovieTypeService.GetMovieTypes();
        await GenreService.GetAdminGenres();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            movie = new Movie { IsNew = true };
            btnText = "Create Movie";
        }
        else
        {
            Movie dbMovie = (await MovieService.GetMovie(Id)).Data;
            if (dbMovie == null)
            {
                msg = $"Movie with {Id} does not exist!";
                return;
            }

            movie = dbMovie;
            movie.Editing = true;
            btnText = "Update Movie";
        }
        loading = false;
    }

    void RemoveVariant(int movieTypeId)
    {
        var variant = movie.Variants.Find(v => v.MovieTypeId == movieTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            movie.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        movie.Variants.Add(new MovieVariant { IsNew = true, MovieId = movie.Id });
    }

    async void AddOrUpdateMovie()
    {
        if (movie.IsNew)
        {
            var result = await MovieService.CreateMovie(movie);
            NavigationManager.NavigateTo($"admin/movie/{result.Id}");
        }
        else
        {
            movie.IsNew = false;
            movie = await MovieService.UpdateMovie(movie);
            NavigationManager.NavigateTo($"admin/movie/{movie.Id}", true);
        }
    }

    async void DeleteMovie()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{movie.Title}'?");
        if (confirmed)
        {
            await MovieService.DeleteMovie(movie);
            NavigationManager.NavigateTo("admin/movies");
        }
    }
    }
